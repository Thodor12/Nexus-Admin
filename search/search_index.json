{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Nexus-Admin Nexus Admin is admin system built on top of Cmdr to simplify load and add additional functionality, including a built in UI. Included is an API for registering custom commands for integration into games that require more than what Cmdr offers.","title":"Home"},{"location":"#nexus-admin","text":"Nexus Admin is admin system built on top of Cmdr to simplify load and add additional functionality, including a built in UI. Included is an API for registering custom commands for integration into games that require more than what Cmdr offers.","title":"Nexus-Admin"},{"location":"creating-commands/","text":"Creating Commands The intended method for registering commands is using tables of data. This can be done using Nexus Admin's structure or Cmdr's structure. You can mix-and-match between them assuming there is no overlap of the data that is populated. Nexus Admin's method mainly exist for backwards compatibility with old versions. Nexus Admin Method Nexus Admin's data structure supports the following elements: - string | List<string> Keyword - Keyword or keywords for the command. - string | List<string> Prefix (optional) - Prefix that must be before the command when executing from the chat. - string Category (optional) - Category for the command. Mainly used for organization when displaying commands. - string Description (optional) - Description for the command. Mainly used for organization when displaying commands. - number AdminLevel (optional) - Admin level required to run the command. Be aware anyone can run a command if the admin level is not defined. - List< CommandArgument > Arguments (optional) - Arguments used to run the command. - function Run (optional) - Runs the command. The Run method is called with 2 parameters: The reference to the command object and a CommandContext . Additional parameters are passed for each argument specified with Args or Arguments . The examples above show this. --Get the Nexus Admin API. --Use a ModuleScript and parent this to the server loaded. local NexusAdminAPI = require ( game : GetService ( \"ServerScriptService\" ): WaitForChild ( \"NexusAdmin\" )) --For the client, use: --Use a local script and parent this to anywhere that runs player scripts, or use a ModuleScript required by a LocalScript. --local NexusAdminAPI = require(game:GetService(\"ReplicatedStorage\"):WaitForChild(\"NexusAdminClient\")) --Create the command data. local CommandData = { Keyword = \"test\" , --Could use Keyword = {\"test1\",\"test2\"} for multiple names. Prefix = NexusAdminAPI . Configuration . CommandPrefix , --Could use {NexusAdminAPI.Configuration.CommandPrefix,\"!\"} for multiple prefixes. Recommended to get the prefix from the configuration for consistency. Category = \"TestCommands\" , Description = \"My first test command!\" , AdminLevel = 2 , Arguments = { { Type = \"nexusAdminPlayers\" , --See below for nexusAdminPlayers vs players Name = \"Players\" , Description = \"Players execute on.\" , }, { Type = \"string\" , Name = \"Message\" , Description = \"Message to use.\" , }, }, Run = function ( self , CommandContext , Players , Message ) print ( \"Raw command: \" .. CommandContext . RawText ) print ( \"Players: \" ..# Players ) print ( \"Message: \" .. Message ) end , } --Load the command. NexusAdminAPI . Registry : LoadCommand ( CommandData ) --Return true to make the ModuleScript not fail to load. return true Cmdr Method Any command passed into Nexus Admin's registry to load has to be parsed to Cmdr's structure. Cmdr CommandDefinition s can also be passed into the registry. If there are considerations of moving to Cmdr in the future instead of Nexus Admin, Cmdr's structure should be used to minimize the time converting code. Prefix and AdminLevel from the Nexus Admin method can also be included for Nexus Admin. --Get the Nexus Admin API. --Use a ModuleScript and parent this to the server loaded. local NexusAdminAPI = require ( game : GetService ( \"ServerScriptService\" ): WaitForChild ( \"NexusAdmin\" )) --For the client, use: --Use a local script and parent this to anywhere that runs player scripts, or use a ModuleScript required by a LocalScript. --local NexusAdminAPI = require(game:GetService(\"ReplicatedStorage\"):WaitForChild(\"NexusAdminClient\")) --Create the command data. local CommandData = { Name = \"test\" , Aliases = { \"test1\" , \"test2\" }, Description = \"My first test command!\" , Group = \"TestCommands\" , Args = { { Type = \"nexusAdminPlayers\" , --See below for nexusAdminPlayers vs players Name = \"Players\" , Description = \"Players execute on.\" , }, { Type = \"string\" , Name = \"Message\" , Description = \"Message to use.\" , }, }, Run = function ( self , CommandContext , Players , Message ) print ( \"Raw command: \" .. CommandContext . RawText ) print ( \"Players: \" ..# Players ) print ( \"Message: \" .. Message ) end , --Optional for Nexus Admin. Prefix = NexusAdminAPI . Configuration . CommandPrefix , --Could use {NexusAdminAPI.Configuration.CommandPrefix,\"!\"} for multiple prefixes. Recommended to get the prefix from the configuration for consistency. AdminLevel = 2 , } --Load the command. NexusAdminAPI . Registry : LoadCommand ( CommandData ) --Return true to make the ModuleScript not fail to load. return true Custom type: nexusAdminPlayers The players type in Cmdr has several limitations that made it not ideal, including: - Shorthands (like me , admins ) aren't extendable, preventing custom ones like admins and nonadmins from being used. - Teams and players can't be mixed (ex: :god me,%green,%blue ). - random was rejected from being implemented. Those using old versions would have to get used to ? . nexusAdminPlayers can be used in place of players in any of the arguments for handling players while still providing proper parsing and auto-complete. For specific integrations, custom shorthands can be added.","title":"Creating Commands"},{"location":"creating-commands/#creating-commands","text":"The intended method for registering commands is using tables of data. This can be done using Nexus Admin's structure or Cmdr's structure. You can mix-and-match between them assuming there is no overlap of the data that is populated. Nexus Admin's method mainly exist for backwards compatibility with old versions.","title":"Creating Commands"},{"location":"creating-commands/#nexus-admin-method","text":"Nexus Admin's data structure supports the following elements: - string | List<string> Keyword - Keyword or keywords for the command. - string | List<string> Prefix (optional) - Prefix that must be before the command when executing from the chat. - string Category (optional) - Category for the command. Mainly used for organization when displaying commands. - string Description (optional) - Description for the command. Mainly used for organization when displaying commands. - number AdminLevel (optional) - Admin level required to run the command. Be aware anyone can run a command if the admin level is not defined. - List< CommandArgument > Arguments (optional) - Arguments used to run the command. - function Run (optional) - Runs the command. The Run method is called with 2 parameters: The reference to the command object and a CommandContext . Additional parameters are passed for each argument specified with Args or Arguments . The examples above show this. --Get the Nexus Admin API. --Use a ModuleScript and parent this to the server loaded. local NexusAdminAPI = require ( game : GetService ( \"ServerScriptService\" ): WaitForChild ( \"NexusAdmin\" )) --For the client, use: --Use a local script and parent this to anywhere that runs player scripts, or use a ModuleScript required by a LocalScript. --local NexusAdminAPI = require(game:GetService(\"ReplicatedStorage\"):WaitForChild(\"NexusAdminClient\")) --Create the command data. local CommandData = { Keyword = \"test\" , --Could use Keyword = {\"test1\",\"test2\"} for multiple names. Prefix = NexusAdminAPI . Configuration . CommandPrefix , --Could use {NexusAdminAPI.Configuration.CommandPrefix,\"!\"} for multiple prefixes. Recommended to get the prefix from the configuration for consistency. Category = \"TestCommands\" , Description = \"My first test command!\" , AdminLevel = 2 , Arguments = { { Type = \"nexusAdminPlayers\" , --See below for nexusAdminPlayers vs players Name = \"Players\" , Description = \"Players execute on.\" , }, { Type = \"string\" , Name = \"Message\" , Description = \"Message to use.\" , }, }, Run = function ( self , CommandContext , Players , Message ) print ( \"Raw command: \" .. CommandContext . RawText ) print ( \"Players: \" ..# Players ) print ( \"Message: \" .. Message ) end , } --Load the command. NexusAdminAPI . Registry : LoadCommand ( CommandData ) --Return true to make the ModuleScript not fail to load. return true","title":"Nexus Admin Method"},{"location":"creating-commands/#cmdr-method","text":"Any command passed into Nexus Admin's registry to load has to be parsed to Cmdr's structure. Cmdr CommandDefinition s can also be passed into the registry. If there are considerations of moving to Cmdr in the future instead of Nexus Admin, Cmdr's structure should be used to minimize the time converting code. Prefix and AdminLevel from the Nexus Admin method can also be included for Nexus Admin. --Get the Nexus Admin API. --Use a ModuleScript and parent this to the server loaded. local NexusAdminAPI = require ( game : GetService ( \"ServerScriptService\" ): WaitForChild ( \"NexusAdmin\" )) --For the client, use: --Use a local script and parent this to anywhere that runs player scripts, or use a ModuleScript required by a LocalScript. --local NexusAdminAPI = require(game:GetService(\"ReplicatedStorage\"):WaitForChild(\"NexusAdminClient\")) --Create the command data. local CommandData = { Name = \"test\" , Aliases = { \"test1\" , \"test2\" }, Description = \"My first test command!\" , Group = \"TestCommands\" , Args = { { Type = \"nexusAdminPlayers\" , --See below for nexusAdminPlayers vs players Name = \"Players\" , Description = \"Players execute on.\" , }, { Type = \"string\" , Name = \"Message\" , Description = \"Message to use.\" , }, }, Run = function ( self , CommandContext , Players , Message ) print ( \"Raw command: \" .. CommandContext . RawText ) print ( \"Players: \" ..# Players ) print ( \"Message: \" .. Message ) end , --Optional for Nexus Admin. Prefix = NexusAdminAPI . Configuration . CommandPrefix , --Could use {NexusAdminAPI.Configuration.CommandPrefix,\"!\"} for multiple prefixes. Recommended to get the prefix from the configuration for consistency. AdminLevel = 2 , } --Load the command. NexusAdminAPI . Registry : LoadCommand ( CommandData ) --Return true to make the ModuleScript not fail to load. return true","title":"Cmdr Method"},{"location":"creating-commands/#custom-type-nexusadminplayers","text":"The players type in Cmdr has several limitations that made it not ideal, including: - Shorthands (like me , admins ) aren't extendable, preventing custom ones like admins and nonadmins from being used. - Teams and players can't be mixed (ex: :god me,%green,%blue ). - random was rejected from being implemented. Those using old versions would have to get used to ? . nexusAdminPlayers can be used in place of players in any of the arguments for handling players while still providing proper parsing and auto-complete. For specific integrations, custom shorthands can be added.","title":"Custom type: nexusAdminPlayers"},{"location":"frequently-asked-questions/","text":"Frequently Asked Questions This page includes questions that were asked a lot in previous and current versions of Nexus Admin. One or more may be able to answer a question without having to get an answer. Where do I create support requests? If the other questions answer your question, you shouldn't have to do so. In the case that you still need support, GitHub issues are best place since they are publicly searchable under the repository. Private messages on services like Twitter are the next-best option since they are in one place. Support on Roblox is not provided since code can't be formatted. How do I insert Nexus Admin? The easiest way to insert Nexus Admin into a game is to obtain the model on Roblox and insert it into ServerScriptService of your game using Roblox Studio. How do I make myself an admin? If you are the owner of the game, you will automatically have the highest level of admin. If you are inserting it in Roblox Studio and it fails to load, it may be because you need to own a copy of source code before Roblox will be able to insert it. This is not needed for live games. How do I make others admins? The configuration information is covered in the loader instead of the docs. Support is not given for how to configure the loader, but requests to improve or change the loader are accepted. Basic questions like these either point to a problem that can be addressed in the loader script or your own knowledge of Roblox Studio. How do I create a custom command? See Creating Commands . Support is not provided on implementing commands. How do I (something related to Innovation Security's Commends System)? Nexus Admin's business justification for existing was for the Innovation Security Commends System. This however has caused quite a few people to expect support for trying to clone Innovation Security or provide access to proprietary code owned by Innovation Security. You are free to use Nexus Admin, but support will not be given for specific questions regarding the Innovation Security Commends System. Are changes for the command line or Cmdr APIs accepted? If there is request for a change that is specific to Cmdr, such as the Cmdr API, argument parsing (excluding nexusAdminPlayers ), or the Cmdr command line user interface, it should me made on the Cmdr repository . If the feature exists in a newer release than Nexus Admin uses, a request can be made to update it.","title":"Frequently Asked Questions"},{"location":"frequently-asked-questions/#frequently-asked-questions","text":"This page includes questions that were asked a lot in previous and current versions of Nexus Admin. One or more may be able to answer a question without having to get an answer.","title":"Frequently Asked Questions"},{"location":"frequently-asked-questions/#where-do-i-create-support-requests","text":"If the other questions answer your question, you shouldn't have to do so. In the case that you still need support, GitHub issues are best place since they are publicly searchable under the repository. Private messages on services like Twitter are the next-best option since they are in one place. Support on Roblox is not provided since code can't be formatted.","title":"Where do I create support requests?"},{"location":"frequently-asked-questions/#how-do-i-insert-nexus-admin","text":"The easiest way to insert Nexus Admin into a game is to obtain the model on Roblox and insert it into ServerScriptService of your game using Roblox Studio.","title":"How do I insert Nexus Admin?"},{"location":"frequently-asked-questions/#how-do-i-make-myself-an-admin","text":"If you are the owner of the game, you will automatically have the highest level of admin. If you are inserting it in Roblox Studio and it fails to load, it may be because you need to own a copy of source code before Roblox will be able to insert it. This is not needed for live games.","title":"How do I make myself an admin?"},{"location":"frequently-asked-questions/#how-do-i-make-others-admins","text":"The configuration information is covered in the loader instead of the docs. Support is not given for how to configure the loader, but requests to improve or change the loader are accepted. Basic questions like these either point to a problem that can be addressed in the loader script or your own knowledge of Roblox Studio.","title":"How do I make others admins?"},{"location":"frequently-asked-questions/#how-do-i-create-a-custom-command","text":"See Creating Commands . Support is not provided on implementing commands.","title":"How do I create a custom command?"},{"location":"frequently-asked-questions/#how-do-i-something-related-to-innovation-securitys-commends-system","text":"Nexus Admin's business justification for existing was for the Innovation Security Commends System. This however has caused quite a few people to expect support for trying to clone Innovation Security or provide access to proprietary code owned by Innovation Security. You are free to use Nexus Admin, but support will not be given for specific questions regarding the Innovation Security Commends System.","title":"How do I (something related to Innovation Security's Commends System)?"},{"location":"frequently-asked-questions/#are-changes-for-the-command-line-or-cmdr-apis-accepted","text":"If there is request for a change that is specific to Cmdr, such as the Cmdr API, argument parsing (excluding nexusAdminPlayers ), or the Cmdr command line user interface, it should me made on the Cmdr repository . If the feature exists in a newer release than Nexus Admin uses, a request can be made to update it.","title":"Are changes for the command line or Cmdr APIs accepted?"},{"location":"included-feature-flags/","text":"Included Feature Flags This page includes the feature flags included for internal implementations. Most likely developers working on a custom integration will be the only ones changing them. UseNativeMessageGui (default: true ) If true, the native messages GUI will be displayed when Messages:DisplayMessage() is used. If false, no GUI is displayed intended for the developer to replace. UseNativeHintGui (default: true ) If true, the native hits GUI will be displayed when Messages:DisplayHint() is used. If false, no GUI is displayed intended for the developer to replace. DisplayAdminLevelNotifications (default: true ) If true, messages will be displayed when the player changes admin levels as well as on join. If false, no message will be displayed when the admin level is changed. AllowChatCommandExecuting (default: true ) If true, commands can be executed from the chat with prefixes used. If false, chat executing will be ignored.","title":"Included Feature Flags"},{"location":"included-feature-flags/#included-feature-flags","text":"This page includes the feature flags included for internal implementations. Most likely developers working on a custom integration will be the only ones changing them.","title":"Included Feature Flags"},{"location":"included-feature-flags/#usenativemessagegui-default-true","text":"If true, the native messages GUI will be displayed when Messages:DisplayMessage() is used. If false, no GUI is displayed intended for the developer to replace.","title":"UseNativeMessageGui (default: true)"},{"location":"included-feature-flags/#usenativehintgui-default-true","text":"If true, the native hits GUI will be displayed when Messages:DisplayHint() is used. If false, no GUI is displayed intended for the developer to replace.","title":"UseNativeHintGui (default: true)"},{"location":"included-feature-flags/#displayadminlevelnotifications-default-true","text":"If true, messages will be displayed when the player changes admin levels as well as on join. If false, no message will be displayed when the admin level is changed.","title":"DisplayAdminLevelNotifications (default: true)"},{"location":"included-feature-flags/#allowchatcommandexecuting-default-true","text":"If true, commands can be executed from the chat with prefixes used. If false, chat executing will be ignored.","title":"AllowChatCommandExecuting (default: true)"},{"location":"api-reference/client-api/","text":"Client API Getting Client API The client API can be fetched using require(game:GetService(\"ReplicatedStorage\"):WaitForChild(\"NexusAdminClient\")) . The API can be called in a LocalScript. Unlike the server, the API can be used at any point since a configuration doesn't need to load first from another script. The server configuration will already be initialized by the time the client connects. Client API Components Modules: ClientAPI.Authorization ClientAPI.Cmdr ClientAPI.Configuration ClientAPI.Executor ClientAPI.FeatureFlags ClientAPI.Gui ClientAPI.Messages ClientAPI.Registry ClientAPI.Time ClientAPI.Types Folder ClientAPI.EventContainer Container in ReplicatedStorage for storing remote events. Folder ClientAPI.AdminItemContainer Container in Workspace for models used in Nexus Admin.","title":"Client API"},{"location":"api-reference/client-api/#client-api","text":"","title":"Client API"},{"location":"api-reference/client-api/#getting-client-api","text":"The client API can be fetched using require(game:GetService(\"ReplicatedStorage\"):WaitForChild(\"NexusAdminClient\")) . The API can be called in a LocalScript. Unlike the server, the API can be used at any point since a configuration doesn't need to load first from another script. The server configuration will already be initialized by the time the client connects.","title":"Getting Client API"},{"location":"api-reference/client-api/#client-api-components","text":"","title":"Client API Components"},{"location":"api-reference/client-api/#modules","text":"ClientAPI.Authorization ClientAPI.Cmdr ClientAPI.Configuration ClientAPI.Executor ClientAPI.FeatureFlags ClientAPI.Gui ClientAPI.Messages ClientAPI.Registry ClientAPI.Time ClientAPI.Types","title":"Modules:"},{"location":"api-reference/client-api/#folder-clientapieventcontainer","text":"Container in ReplicatedStorage for storing remote events.","title":"Folder ClientAPI.EventContainer"},{"location":"api-reference/client-api/#folder-clientapiadminitemcontainer","text":"Container in Workspace for models used in Nexus Admin.","title":"Folder ClientAPI.AdminItemContainer"},{"location":"api-reference/server-api/","text":"Server API Getting Server API The server API can be fetched using require(game:GetService(\"ServerScriptService\"):WaitForChild(\"NexusAdmin\")) . The API can be called in a server script, but it is recommended to be put in a ModuleScript and parent it to the loader. This guarentees the API is loaded before using. Server API Components Modules: ServerAPI.Authorization ServerAPI.Cmdr ServerAPI.Configuration ServerAPI.Executor ServerAPI.FeatureFlags ServerAPI.Filter ServerAPI.Logs ServerAPI.Messages ServerAPI.Registry ServerAPI.Replicator ServerAPI.Time ServerAPI.Types Folder ServerAPI.EventContainer Container in ReplicatedStorage for storing remote events. Folder ServerAPI.AdminItemContainer Container in Workspace for models used in Nexus Admin. boolean ServerAPI:GetAdminLoaded() Returns if Nexus Admin is loaded.","title":"Server API"},{"location":"api-reference/server-api/#server-api","text":"","title":"Server API"},{"location":"api-reference/server-api/#getting-server-api","text":"The server API can be fetched using require(game:GetService(\"ServerScriptService\"):WaitForChild(\"NexusAdmin\")) . The API can be called in a server script, but it is recommended to be put in a ModuleScript and parent it to the loader. This guarentees the API is loaded before using.","title":"Getting Server API"},{"location":"api-reference/server-api/#server-api-components","text":"","title":"Server API Components"},{"location":"api-reference/server-api/#modules","text":"ServerAPI.Authorization ServerAPI.Cmdr ServerAPI.Configuration ServerAPI.Executor ServerAPI.FeatureFlags ServerAPI.Filter ServerAPI.Logs ServerAPI.Messages ServerAPI.Registry ServerAPI.Replicator ServerAPI.Time ServerAPI.Types","title":"Modules:"},{"location":"api-reference/server-api/#folder-serverapieventcontainer","text":"Container in ReplicatedStorage for storing remote events.","title":"Folder ServerAPI.EventContainer"},{"location":"api-reference/server-api/#folder-serverapiadminitemcontainer","text":"Container in Workspace for models used in Nexus Admin.","title":"Folder ServerAPI.AdminItemContainer"},{"location":"api-reference/server-api/#boolean-serverapigetadminloaded","text":"Returns if Nexus Admin is loaded.","title":"boolean ServerAPI:GetAdminLoaded()"},{"location":"api-reference/modules/authorization/","text":"Authorization Handles users being authorized. Exists on the server and client. Event<Player> Authorization.AdminLevelChanged Event that is fired when a player's admin level changes. number Authorization:GetAdminLevel(Player Player) Returns the admin level for a player. boolean Authorization:IsPlayerAuthorized(Player Player,number AdminLevel) Returns if the user is authorized. number Authorization:YieldForAdminLevel(Player Player) Waits for an admin level to be defined. Returns it when it is initialized. void Authorization:SetAdminLevel(Player Player,number AdminLevel) Sets the admin level for a player. Warning This should not be used on the client since will result in admin levels become desyncronized from the server. This may lead to unsable behavior.","title":"Authorization"},{"location":"api-reference/modules/authorization/#authorization","text":"Handles users being authorized. Exists on the server and client.","title":"Authorization"},{"location":"api-reference/modules/authorization/#eventltplayergt-authorizationadminlevelchanged","text":"Event that is fired when a player's admin level changes.","title":"Event&lt;Player&gt; Authorization.AdminLevelChanged"},{"location":"api-reference/modules/authorization/#number-authorizationgetadminlevelplayer-player","text":"Returns the admin level for a player.","title":"number Authorization:GetAdminLevel(Player Player)"},{"location":"api-reference/modules/authorization/#boolean-authorizationisplayerauthorizedplayer-playernumber-adminlevel","text":"Returns if the user is authorized.","title":"boolean Authorization:IsPlayerAuthorized(Player Player,number AdminLevel)"},{"location":"api-reference/modules/authorization/#number-authorizationyieldforadminlevelplayer-player","text":"Waits for an admin level to be defined. Returns it when it is initialized.","title":"number Authorization:YieldForAdminLevel(Player Player)"},{"location":"api-reference/modules/authorization/#void-authorizationsetadminlevelplayer-playernumber-adminlevel","text":"Sets the admin level for a player. Warning This should not be used on the client since will result in admin levels become desyncronized from the server. This may lead to unsable behavior.","title":"void Authorization:SetAdminLevel(Player Player,number AdminLevel)"},{"location":"api-reference/modules/clientmessages/","text":"Logs Sends messages to the local player. Exists only on the client. Use ServerMessages for the server. void ClientMessages:DisplayMessage(string TopText,string Message,number? DisplayTime) Sends a message to the local player. void ClientMessages:DisplayHint(string Message,number? DisplayTime) Sends a client to the local player.","title":"ClientMessages"},{"location":"api-reference/modules/clientmessages/#logs","text":"Sends messages to the local player. Exists only on the client. Use ServerMessages for the server.","title":"Logs"},{"location":"api-reference/modules/clientmessages/#void-clientmessagesdisplaymessagestring-toptextstring-messagenumber-displaytime","text":"Sends a message to the local player.","title":"void ClientMessages:DisplayMessage(string TopText,string Message,number? DisplayTime)"},{"location":"api-reference/modules/clientmessages/#void-clientmessagesdisplayhintstring-messagenumber-displaytime","text":"Sends a client to the local player.","title":"void ClientMessages:DisplayHint(string Message,number? DisplayTime)"},{"location":"api-reference/modules/configuration/","text":"Configuration Stores and parses the configuration. Exists on the server and client. Note The configuration is replicated to clients, but changes are not replicated. Changing the configuration at runtime is not supported. string Configuration.Version Version of Nexus Admin as a string, including the main version, sub version, and patch version. number Configuration.VersionNumberId Version of Nexus Admin as a number, including the main version and sub version. This should be used for version checking for publicly-released commands as some people may have forked Nexus Admin to use an older version. string Configuration.CmdrVersion Version of Cmdr used. It shouldn't be used for version checking since a commit past the version may be in use depending on the existing state of Cmdr. string Configuration.CommandPrefix Default command prefix for running commands. By default, it is : , although ! and ; are also used since : is typically the first character of emoticons. number Configuration.DefaultAdminLevel Default admin level for players in the game. By default, it is -1 . number Configuration.AdministrativeLevel Default admin level required for \"Administrative\" commands. By default, it is 1 . number Configuration.BuildUtilityLevel Default admin level required for \"Build Utility\" commands. By default, it is 1 . number Configuration.BasicCommandsLevel Default admin level required for \"Basic Commands\" commands. By default, it is 1 . number Configuration.UsefulFunCommandsLevel Default admin level required for \"Useful Fun Commands\" commands. By default, it is 2 . number Configuration.FunCommandsLevel Default admin level required for \"Fun Commands\" commands. By default, it is 3 . number Configuration.PersistentCommandsLevel Default admin level required for \"Persistent Commands\" commands. By default, it is 4 . table<number,number> Configuration.Admins Table with the keys being the user ids to and the values being the admin level for the user. table<number,string> Configuration.AdminNames Table with the keys being the admin level and the value being the name of the admin leve. Note It is possible for admins levels to exist with no name. It is recommended to the highest admin level name that does not go above the given admin level. table<number,table<number,number>> Configuration.GroupAdminLevels Table for storing the admin levels of group members. The keys refer to the group id with the values being a table with the keys being the role id and the value being the admin level. table<number,boolean | string> Configuration.BannedUsers Table for storing the banned users, with the keys being the user id and either a ban message for true if no ban message should be shown. table<string,table<string,number>> Configuration.CommandLevelOverrides Table for storing overrides to command levels. Configuration:GetCommandAdminLevel(Category,Command) should be used for reading it. table<string,boolean> Configuration.FeatureFlagOverrides Fast flag overrides defined by the configuration. table Configuration:GetRaw() Raw configuration used table. This is intended for custom configuration entries used for custom deployments. number Configuration:GetCommandAdminLevel(string Category,string Command) Returns the admin level to use for an integrated command.","title":"Configuration"},{"location":"api-reference/modules/configuration/#configuration","text":"Stores and parses the configuration. Exists on the server and client. Note The configuration is replicated to clients, but changes are not replicated. Changing the configuration at runtime is not supported.","title":"Configuration"},{"location":"api-reference/modules/configuration/#string-configurationversion","text":"Version of Nexus Admin as a string, including the main version, sub version, and patch version.","title":"string Configuration.Version"},{"location":"api-reference/modules/configuration/#number-configurationversionnumberid","text":"Version of Nexus Admin as a number, including the main version and sub version. This should be used for version checking for publicly-released commands as some people may have forked Nexus Admin to use an older version.","title":"number Configuration.VersionNumberId"},{"location":"api-reference/modules/configuration/#string-configurationcmdrversion","text":"Version of Cmdr used. It shouldn't be used for version checking since a commit past the version may be in use depending on the existing state of Cmdr.","title":"string Configuration.CmdrVersion"},{"location":"api-reference/modules/configuration/#string-configurationcommandprefix","text":"Default command prefix for running commands. By default, it is : , although ! and ; are also used since : is typically the first character of emoticons.","title":"string Configuration.CommandPrefix"},{"location":"api-reference/modules/configuration/#number-configurationdefaultadminlevel","text":"Default admin level for players in the game. By default, it is -1 .","title":"number Configuration.DefaultAdminLevel"},{"location":"api-reference/modules/configuration/#number-configurationadministrativelevel","text":"Default admin level required for \"Administrative\" commands. By default, it is 1 .","title":"number Configuration.AdministrativeLevel"},{"location":"api-reference/modules/configuration/#number-configurationbuildutilitylevel","text":"Default admin level required for \"Build Utility\" commands. By default, it is 1 .","title":"number Configuration.BuildUtilityLevel"},{"location":"api-reference/modules/configuration/#number-configurationbasiccommandslevel","text":"Default admin level required for \"Basic Commands\" commands. By default, it is 1 .","title":"number Configuration.BasicCommandsLevel"},{"location":"api-reference/modules/configuration/#number-configurationusefulfuncommandslevel","text":"Default admin level required for \"Useful Fun Commands\" commands. By default, it is 2 .","title":"number Configuration.UsefulFunCommandsLevel"},{"location":"api-reference/modules/configuration/#number-configurationfuncommandslevel","text":"Default admin level required for \"Fun Commands\" commands. By default, it is 3 .","title":"number Configuration.FunCommandsLevel"},{"location":"api-reference/modules/configuration/#number-configurationpersistentcommandslevel","text":"Default admin level required for \"Persistent Commands\" commands. By default, it is 4 .","title":"number Configuration.PersistentCommandsLevel"},{"location":"api-reference/modules/configuration/#tableltnumbernumbergt-configurationadmins","text":"Table with the keys being the user ids to and the values being the admin level for the user.","title":"table&lt;number,number&gt; Configuration.Admins"},{"location":"api-reference/modules/configuration/#tableltnumberstringgt-configurationadminnames","text":"Table with the keys being the admin level and the value being the name of the admin leve. Note It is possible for admins levels to exist with no name. It is recommended to the highest admin level name that does not go above the given admin level.","title":"table&lt;number,string&gt; Configuration.AdminNames"},{"location":"api-reference/modules/configuration/#tableltnumbertableltnumbernumbergtgt-configurationgroupadminlevels","text":"Table for storing the admin levels of group members. The keys refer to the group id with the values being a table with the keys being the role id and the value being the admin level.","title":"table&lt;number,table&lt;number,number&gt;&gt; Configuration.GroupAdminLevels"},{"location":"api-reference/modules/configuration/#tableltnumberboolean-stringgt-configurationbannedusers","text":"Table for storing the banned users, with the keys being the user id and either a ban message for true if no ban message should be shown.","title":"table&lt;number,boolean | string&gt; Configuration.BannedUsers"},{"location":"api-reference/modules/configuration/#tableltstringtableltstringnumbergtgt-configurationcommandleveloverrides","text":"Table for storing overrides to command levels. Configuration:GetCommandAdminLevel(Category,Command) should be used for reading it.","title":"table&lt;string,table&lt;string,number&gt;&gt; Configuration.CommandLevelOverrides"},{"location":"api-reference/modules/configuration/#tableltstringbooleangt-configurationfeatureflagoverrides","text":"Fast flag overrides defined by the configuration.","title":"table&lt;string,boolean&gt; Configuration.FeatureFlagOverrides"},{"location":"api-reference/modules/configuration/#table-configurationgetraw","text":"Raw configuration used table. This is intended for custom configuration entries used for custom deployments.","title":"table Configuration:GetRaw()"},{"location":"api-reference/modules/configuration/#number-configurationgetcommandadminlevelstring-categorystring-command","text":"Returns the admin level to use for an integrated command.","title":"number Configuration:GetCommandAdminLevel(string Category,string Command)"},{"location":"api-reference/modules/executor/","text":"Executor Executes commands using Cmdr. Exists on the server and client. string Executor:ExecuteCommand(string Command,Player? ReferencePlayer,object? Data) Executes a command. Authorization checks are performs in the command if it was registered through Nexus Admin. string Executor:ExecuteCommandWithPrefix(string Command,Player? ReferencePlayer,object? Data) Executes a command with prefixes. Authorization checks are performs in the command if it was registered through Nexus Admin. string Executor:ExecuteCommandWithOrWithoutPrefix(string Command,Player? ReferencePlayer,object? Data) Executes a command that may or may not have a prefix. Authorization checks are performs in the command if it was registered through Nexus Admin.","title":"Executor"},{"location":"api-reference/modules/executor/#executor","text":"Executes commands using Cmdr. Exists on the server and client.","title":"Executor"},{"location":"api-reference/modules/executor/#string-executorexecutecommandstring-commandplayer-referenceplayerobject-data","text":"Executes a command. Authorization checks are performs in the command if it was registered through Nexus Admin.","title":"string Executor:ExecuteCommand(string Command,Player? ReferencePlayer,object? Data)"},{"location":"api-reference/modules/executor/#string-executorexecutecommandwithprefixstring-commandplayer-referenceplayerobject-data","text":"Executes a command with prefixes. Authorization checks are performs in the command if it was registered through Nexus Admin.","title":"string Executor:ExecuteCommandWithPrefix(string Command,Player? ReferencePlayer,object? Data)"},{"location":"api-reference/modules/executor/#string-executorexecutecommandwithorwithoutprefixstring-commandplayer-referenceplayerobject-data","text":"Executes a command that may or may not have a prefix. Authorization checks are performs in the command if it was registered through Nexus Admin.","title":"string Executor:ExecuteCommandWithOrWithoutPrefix(string Command,Player? ReferencePlayer,object? Data)"},{"location":"api-reference/modules/featureflags/","text":"FeatureFlags Handles feature flags (toggles features being enabled or disabled). Exists on the server and client. Event<string,boolean> FeatureFlags.FeatureFlagChanged Event for when a feature flag gets changed, including the name and new value. void FeatureFlags:AddFeatureFlag(string Name,boolean Value) Adds a feature flag if it wasn't set before. void FeatureFlags:SetFeatureFlag(string Name,boolean Value) Sets a feature flag value. boolean FeatureFlags:GetFeatureFlag(string Name) Returns the feature flag value. Event<boolean> FeatureFlags:GetFeatureFlagChangedEvent(string Name) Returns an event for a specific feature flag changing.","title":"FeatureFlags"},{"location":"api-reference/modules/featureflags/#featureflags","text":"Handles feature flags (toggles features being enabled or disabled). Exists on the server and client.","title":"FeatureFlags"},{"location":"api-reference/modules/featureflags/#eventltstringbooleangt-featureflagsfeatureflagchanged","text":"Event for when a feature flag gets changed, including the name and new value.","title":"Event&lt;string,boolean&gt; FeatureFlags.FeatureFlagChanged"},{"location":"api-reference/modules/featureflags/#void-featureflagsaddfeatureflagstring-nameboolean-value","text":"Adds a feature flag if it wasn't set before.","title":"void FeatureFlags:AddFeatureFlag(string Name,boolean Value)"},{"location":"api-reference/modules/featureflags/#void-featureflagssetfeatureflagstring-nameboolean-value","text":"Sets a feature flag value.","title":"void FeatureFlags:SetFeatureFlag(string Name,boolean Value)"},{"location":"api-reference/modules/featureflags/#boolean-featureflagsgetfeatureflagstring-name","text":"Returns the feature flag value.","title":"boolean FeatureFlags:GetFeatureFlag(string Name)"},{"location":"api-reference/modules/featureflags/#eventltbooleangt-featureflagsgetfeatureflagchangedeventstring-name","text":"Returns an event for a specific feature flag changing.","title":"Event&lt;boolean&gt; FeatureFlags:GetFeatureFlagChangedEvent(string Name)"},{"location":"api-reference/modules/filter/","text":"Filter Filters strings to comply with Roblox's filtering rules. Exists only on the server. string Filter:FilterString(string String,Player PlayerFrom,Player? PlayerTo) Filters a string for a user. table<Player,string> Filter:FilterStringForPlayers(string String,Player PlayerFrom,List<Player> PlayersTo) Filters a string for a set of users. Returns a map of the players to their filtered string.","title":"Filter"},{"location":"api-reference/modules/filter/#filter","text":"Filters strings to comply with Roblox's filtering rules. Exists only on the server.","title":"Filter"},{"location":"api-reference/modules/filter/#string-filterfilterstringstring-stringplayer-playerfromplayer-playerto","text":"Filters a string for a user.","title":"string Filter:FilterString(string String,Player PlayerFrom,Player? PlayerTo)"},{"location":"api-reference/modules/filter/#tableltplayerstringgt-filterfilterstringforplayersstring-stringplayer-playerfromlistltplayergt-playersto","text":"Filters a string for a set of users. Returns a map of the players to their filtered string.","title":"table&lt;Player,string&gt; Filter:FilterStringForPlayers(string String,Player PlayerFrom,List&lt;Player&gt; PlayersTo)"},{"location":"api-reference/modules/gui/","text":"Gui Includes native Gui classes. Gui.Window Base window class for displaying information. Includes closing, refreshing, and moving. static Window.new() Creates a window. Frame Window.WindowFrame Frame containing all of the contents. It should be parented to a ScreenGui to use the window, as well as control the size and position. Frame Window.TopBarAdorn Adorn frame for the top bar. Frame Window.ContentsAdorn Adorn frame for adorning contents. string Window.Title Title of the window. function? Window.OnRefresh Optional function that can be defined to show the refresh button. It is invoked when the refresh button is pressed. function? Window.OnClose Optional function that can be defined to show the close button. It is invoked when the close button is pressed. void Window:Destroy() Destroys the window. Gui.ResizableWindow (extends Gui.Window) Extends the window to add resizing. static ResizableWindow.new(number? MinWidth,number? MinHeight,number? MaxWidth,number? MaxHeight) Creates a resizable window.","title":"Gui"},{"location":"api-reference/modules/gui/#gui","text":"Includes native Gui classes.","title":"Gui"},{"location":"api-reference/modules/gui/#guiwindow","text":"Base window class for displaying information. Includes closing, refreshing, and moving.","title":"Gui.Window"},{"location":"api-reference/modules/gui/#static-windownew","text":"Creates a window.","title":"static Window.new()"},{"location":"api-reference/modules/gui/#frame-windowwindowframe","text":"Frame containing all of the contents. It should be parented to a ScreenGui to use the window, as well as control the size and position.","title":"Frame Window.WindowFrame"},{"location":"api-reference/modules/gui/#frame-windowtopbaradorn","text":"Adorn frame for the top bar.","title":"Frame Window.TopBarAdorn"},{"location":"api-reference/modules/gui/#frame-windowcontentsadorn","text":"Adorn frame for adorning contents.","title":"Frame Window.ContentsAdorn"},{"location":"api-reference/modules/gui/#string-windowtitle","text":"Title of the window.","title":"string Window.Title"},{"location":"api-reference/modules/gui/#function-windowonrefresh","text":"Optional function that can be defined to show the refresh button. It is invoked when the refresh button is pressed.","title":"function? Window.OnRefresh"},{"location":"api-reference/modules/gui/#function-windowonclose","text":"Optional function that can be defined to show the close button. It is invoked when the close button is pressed.","title":"function? Window.OnClose"},{"location":"api-reference/modules/gui/#void-windowdestroy","text":"Destroys the window.","title":"void Window:Destroy()"},{"location":"api-reference/modules/gui/#guiresizablewindow-extends-guiwindow","text":"Extends the window to add resizing.","title":"Gui.ResizableWindow (extends Gui.Window)"},{"location":"api-reference/modules/gui/#static-resizablewindownewnumber-minwidthnumber-minheightnumber-maxwidthnumber-maxheight","text":"Creates a resizable window.","title":"static ResizableWindow.new(number? MinWidth,number? MinHeight,number? MaxWidth,number? MaxHeight)"},{"location":"api-reference/modules/logs/","text":"Logs Stores a log of events. Exists only on the server. List<string> Logs:GetLogs() Returns the logs. void Logs:Add(string Log) Adds a log.","title":"Logs"},{"location":"api-reference/modules/logs/#logs","text":"Stores a log of events. Exists only on the server.","title":"Logs"},{"location":"api-reference/modules/logs/#listltstringgt-logsgetlogs","text":"Returns the logs.","title":"List&lt;string&gt; Logs:GetLogs()"},{"location":"api-reference/modules/logs/#void-logsaddstring-log","text":"Adds a log.","title":"void Logs:Add(string Log)"},{"location":"api-reference/modules/registry/","text":"Registry Regisers commands to be able to be run. Exists on the server and client. void Registry:LoadCommand(table CommandData) Loads a command. Note If called on the server, the command will be registered on the client without a Run function. Commands only need to be registered on the client if they have a client-side Run or ClientRun method.","title":"Registry"},{"location":"api-reference/modules/registry/#registry","text":"Regisers commands to be able to be run. Exists on the server and client.","title":"Registry"},{"location":"api-reference/modules/registry/#void-registryloadcommandtable-commanddata","text":"Loads a command. Note If called on the server, the command will be registered on the client without a Run function. Commands only need to be registered on the client if they have a client-side Run or ClientRun method.","title":"void Registry:LoadCommand(table CommandData)"},{"location":"api-reference/modules/replicator/","text":"Replicator Filters strings to comply with Roblox's filtering rules. Exists only on the server. void Replicator:GiveScriptToPlayer(Player Player,Instance Script) Gives a script to a player. void Replicator:GiveStarterScript(Instance Script) Gives a script to all players.","title":"Replicator"},{"location":"api-reference/modules/replicator/#replicator","text":"Filters strings to comply with Roblox's filtering rules. Exists only on the server.","title":"Replicator"},{"location":"api-reference/modules/replicator/#void-replicatorgivescripttoplayerplayer-playerinstance-script","text":"Gives a script to a player.","title":"void Replicator:GiveScriptToPlayer(Player Player,Instance Script)"},{"location":"api-reference/modules/replicator/#void-replicatorgivestarterscriptinstance-script","text":"Gives a script to all players.","title":"void Replicator:GiveStarterScript(Instance Script)"},{"location":"api-reference/modules/servermessages/","text":"ServerMessages Sends messages to players. Exists only on the client. Use ClientMessages for the client. `void ServerMessages:DisplayMessage(Player Player,string TopText,string Message,number? DisplayTime) Sends a message to a player. void ClientMessages:DisplayHint(Player Player,string Message,number? DisplayTime) Sends a hint to a player.","title":"ServerMessages"},{"location":"api-reference/modules/servermessages/#servermessages","text":"Sends messages to players. Exists only on the client. Use ClientMessages for the client.","title":"ServerMessages"},{"location":"api-reference/modules/servermessages/#void-servermessagesdisplaymessageplayer-playerstring-toptextstring-messagenumber-displaytime","text":"Sends a message to a player.","title":"`void ServerMessages:DisplayMessage(Player Player,string TopText,string Message,number? DisplayTime)"},{"location":"api-reference/modules/servermessages/#void-clientmessagesdisplayhintplayer-playerstring-messagenumber-displaytime","text":"Sends a hint to a player.","title":"void ClientMessages:DisplayHint(Player Player,string Message,number? DisplayTime)"},{"location":"api-reference/modules/time/","text":"Time Utility for time. Exists on the server and client. string Time:GetTimeString(number Time) Returns the current timestamp, or the timestamp for the given time.","title":"Time"},{"location":"api-reference/modules/time/#time","text":"Utility for time. Exists on the server and client.","title":"Time"},{"location":"api-reference/modules/time/#string-timegettimestringnumber-time","text":"Returns the current timestamp, or the timestamp for the given time.","title":"string Time:GetTimeString(number Time)"},{"location":"api-reference/modules/types/","text":"Types Additional APIs for extending the Nexus Admin-specific types. Exists on the server and client. Types.NexusAdminPlayers Type that allows specifying a list of players with shorthands and other selectors. void Types.NexusAdminPlayers:RegisterShortHand(string Name,function<string,Player> Callback) Registers a shorthand that matches a specific string (ignoring case). If a match is found, the callback will be invoked with the message and calling player and expect a list of players back. Additional or missing characters, as well as patterns, will not run the callback. void Types.NexusAdminPlayers:RegisterPatternShortHand(string Name,function<string,Player> Callback) Registers a shorthand that matches a pattern (including case). If a match is found in the pattern, the callback will be invoked with the message and calling player and expect a list of players back.","title":"Types"},{"location":"api-reference/modules/types/#types","text":"Additional APIs for extending the Nexus Admin-specific types. Exists on the server and client.","title":"Types"},{"location":"api-reference/modules/types/#typesnexusadminplayers","text":"Type that allows specifying a list of players with shorthands and other selectors.","title":"Types.NexusAdminPlayers"},{"location":"api-reference/modules/types/#void-typesnexusadminplayersregistershorthandstring-namefunctionltstringplayergt-callback","text":"Registers a shorthand that matches a specific string (ignoring case). If a match is found, the callback will be invoked with the message and calling player and expect a list of players back. Additional or missing characters, as well as patterns, will not run the callback.","title":"void Types.NexusAdminPlayers:RegisterShortHand(string Name,function&lt;string,Player&gt; Callback)"},{"location":"api-reference/modules/types/#void-typesnexusadminplayersregisterpatternshorthandstring-namefunctionltstringplayergt-callback","text":"Registers a shorthand that matches a pattern (including case). If a match is found in the pattern, the callback will be invoked with the message and calling player and expect a list of players back.","title":"void Types.NexusAdminPlayers:RegisterPatternShortHand(string Name,function&lt;string,Player&gt; Callback)"}]}